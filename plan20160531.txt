Contains your team’s plan, in its current form, for realizing your goals. Should address prioritization, workload sharing, and chronology:
    Which jobs are most crucial?
    Which components constitute core functionality (vs non-essential)?
    Which components are prerequisites for others?
    Which tasks can be delegated, and which must be collaboratively tackled?

    What is the timeline, and how does it accommodate setbacks, course changes?
    
            Visualizer for data structures and algorithms

We are going to write a visualizer for the data structures and algorithms covered in the APCS course. It will be written in Processing. We will create visualizations for arrays, linked lists, trees, queues, deques, and stacks, bubble sort, selection sort, insertion sort, merge sort, quicksort, and heapsort, and binary and linear search, and tree traversals. It’ll be similar to the Waterloo Java visualizer, but mainly for sorts and data structures (helpful for people who learn best by visual cues). The data structures will be represented in ways that we’ve seen them represented in class, such as circle and line connections for trees and boxes for arrays. 

Solidify:
Data structures
Sorts
Searches
Traversals
Showcase:
Understanding of structures and algorithms
Stretch:
Using Processing
